{
  "version": 3,
  "sources": ["../src/index.tsx", "../src/components/Input.tsx", "../src/lib/utils.ts", "../src/lib/generateClamp.ts"],
  "sourcesContent": ["import { Form, ActionPanel, Action, showToast, Toast, Clipboard } from \"@raycast/api\";\nimport { useState, useMemo, useCallback } from \"react\";\n\n// Components\nimport Input from \"./components/Input\";\n\n// Lib\nimport generateClamp from \"./lib/generateClamp\";\nimport { convertValue } from \"./lib/utils\";\n\nexport default function Command() {\n  const [unitType, setUnitType] = useState<TUnit>(\"px\");\n  const [minViewportWidth, setMinViewportWidth] = useState(\"500\");\n  const [maxViewportWidth, setMaxViewportWidth] = useState(\"1200\");\n  const [minFontSize, setMinFontSize] = useState(\"16\");\n  const [maxFontSize, setMaxFontSize] = useState(\"48\");\n  const [clampValue, setClampValue] = useState(\"\");\n\n  const handleUnitChange = useCallback(\n    (value: string) => {\n      if (value) {\n        const typedValue = value as TUnit;\n\n        setUnitType(typedValue);\n        setMinViewportWidth(`${convertValue(minViewportWidth, typedValue)}`);\n        setMaxViewportWidth(`${convertValue(maxViewportWidth, typedValue)}`);\n        setMinFontSize(`${convertValue(minFontSize, typedValue)}`);\n        setMaxFontSize(`${convertValue(maxFontSize, typedValue)}`);\n      }\n    },\n    [minViewportWidth, maxViewportWidth, minFontSize, maxFontSize],\n  );\n\n  useMemo(() => {\n    const clampFunc = generateClamp({\n      minViewportWidth,\n      maxViewportWidth,\n      minFontSize,\n      maxFontSize,\n      unit: unitType,\n    });\n\n    setClampValue(clampFunc);\n  }, [minViewportWidth, maxViewportWidth, minFontSize, maxFontSize, unitType]);\n\n  async function handleSubmit() {\n    await Clipboard.copy(clampValue);\n\n    await showToast({\n      style: Toast.Style.Success,\n      title: \"Generated\",\n      message: \"Copied font-size to clipboard\",\n    });\n  }\n\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm onSubmit={handleSubmit} title=\"Generate\" />\n        </ActionPanel>\n      }\n    >\n      <Form.Description text=\"Create dynamic font sizes using the 'clamp' CSS function.\" />\n      <Form.Dropdown id=\"unit\" title=\"Measurement Unit\" value={unitType} onChange={handleUnitChange}>\n        <Form.Dropdown.Item value=\"px\" title=\"Pixels\" />\n        <Form.Dropdown.Item value=\"rem\" title=\"REM\" />\n      </Form.Dropdown>\n      <Input\n        id=\"minViewportWidth\"\n        title=\"Minimum Viewport Width\"\n        placeholder=\"Enter minimum\"\n        value={minViewportWidth}\n        onChange={setMinViewportWidth}\n      />\n      <Input\n        id=\"maxViewportWidth\"\n        title=\"Maximum Viewport Width\"\n        placeholder=\"Enter maximum\"\n        value={maxViewportWidth}\n        onChange={setMaxViewportWidth}\n      />\n      <Input\n        id=\"minFontSize\"\n        title=\"Minimum Font Size\"\n        placeholder=\"Enter minimum\"\n        value={minFontSize}\n        onChange={setMinFontSize}\n      />\n      <Input\n        id=\"maxFontSize\"\n        title=\"Maximum Font Size\"\n        placeholder=\"Enter maximum\"\n        value={maxFontSize}\n        onChange={setMaxFontSize}\n      />\n    </Form>\n  );\n}\n", "import { Form } from \"@raycast/api\";\n\nexport type IInputProps = {\n  id: string;\n  title: string;\n  placeholder?: string;\n  value?: string | undefined;\n  onChange(value: string): void;\n};\n\nfunction Input({ id, title, placeholder, value, onChange: handleChange }: IInputProps) {\n  const handleTextFieldChange = async (value: string) => {\n    // Convert string to only allow numbers, decimals and remove '0' if it's the first character\n    const converted = value.replace(/^[0](\\d+)/, \"$1\").replace(/[^\\d.,]/g, \"\");\n\n    // Check if value is present, otherwise fall back to zero\n    if (converted) {\n      handleChange(converted);\n    } else {\n      handleChange(\"0\");\n    }\n  };\n\n  return (\n    <Form.TextField id={id} title={title} placeholder={placeholder} value={value} onChange={handleTextFieldChange} />\n  );\n}\n\nexport default Input;\n", "const remSize = 16;\n\nexport function roundNumber(value: number) {\n  return parseFloat(value.toFixed(4));\n}\n\nexport function convertToRem(value: string, unit: TUnit): number {\n  if (unit === \"rem\") {\n    return parseFloat(value);\n  }\n\n  return parseFloat(value) / remSize;\n}\n\nexport function convertValue(value: string, unit: TUnit): number {\n  if (unit === \"rem\") {\n    return parseFloat(value) / remSize;\n  }\n\n  return parseFloat(value) * remSize;\n}\n", "// Helpers\nimport { roundNumber, convertToRem } from \"./utils\";\n\nexport default function generateClamp(values: {\n  minViewportWidth: string;\n  maxViewportWidth: string;\n  minFontSize: string;\n  maxFontSize: string;\n  unit: TUnit;\n}): string {\n  // Turn all values into REM\n  const minViewportWidth = convertToRem(values.minViewportWidth, values.unit);\n  const maxViewportWidth = convertToRem(values.maxViewportWidth, values.unit);\n  const minFontSize = convertToRem(values.minFontSize, values.unit);\n  const maxFontSize = convertToRem(values.maxFontSize, values.unit);\n\n  // Calculate values\n  const slope = (maxFontSize - minFontSize) / (maxViewportWidth - minViewportWidth);\n  const yAxisIntersection = roundNumber(-minViewportWidth * slope + minFontSize);\n\n  // String values\n  const min = `${minFontSize}rem`;\n  const max = `${maxFontSize}rem`;\n  const preferred = `${yAxisIntersection}rem + ${roundNumber(slope * 100)}vw`;\n\n  return `clamp(${min}, ${preferred}, ${max})`;\n}\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_api", "import_jsx_runtime", "Input", "id", "title", "placeholder", "value", "handleChange", "handleTextFieldChange", "converted", "Input_default", "roundNumber", "value", "convertToRem", "unit", "convertValue", "generateClamp", "values", "minViewportWidth", "convertToRem", "maxViewportWidth", "minFontSize", "maxFontSize", "slope", "yAxisIntersection", "roundNumber", "min", "max", "preferred", "import_jsx_runtime", "Command", "unitType", "setUnitType", "minViewportWidth", "setMinViewportWidth", "maxViewportWidth", "setMaxViewportWidth", "minFontSize", "setMinFontSize", "maxFontSize", "setMaxFontSize", "clampValue", "setClampValue", "handleUnitChange", "value", "typedValue", "convertValue", "clampFunc", "generateClamp", "handleSubmit", "Input_default"]
}
